{
  "name": "mach",
  "version": "0.9.2",
  "description": "A better way to build web servers",
  "main": "modules/index.js",
  "dependencies": {
    "rsvp": "~3.0.6",
    "mime": "~1.2.9",
    "strftime": "~0.5.0",
    "microtime": "~0.4.0",
    "qs": "~0.6.5",
    "then-redis": "~0.3.8"
  },
  "optionalDependencies": {
    "then-redis": "~0.3.8"
  },
  "devDependencies": {
    "mocha-as-promised": "~1.3.0",
    "expect": "~0.1.1"
  },
  "scripts": {
    "test": "mocha spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mjijackson/mach.git"
  },
  "keywords": [
    "web",
    "server",
    "http",
    "strata",
    "jsgi",
    "then",
    "promise",
    "promises"
  ],
  "engines": {
    "node": "0.10.x"
  },
  "author": {
    "name": "Michael Jackson"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mjijackson/mach/issues"
  },
  "readme": "## Mach\n\nMach is a better way to build fully asynchronous web servers using node.js. It has the following goals:\n\n  * Simplicity: straightforward mapping of HTTP requests to JavaScript function calls\n  * Asynchronous: responses can be deferred using a standard Promises/A+ compatible promise\n  * Streaming: request and response bodies can be streamed\n  * Composability: middleware composes easily using promises\n  * Robust: Promises propagate errors up the call stack, simplifying error handling\n\n\"Hello world\" in Mach is simple.\n\n```js\nrequire(\"mach\").serve(function (request) {\n  return \"Hello world!\";\n});\n```\n\nMore complex applications can be built through the use of various middleware. Mach includes middleware for doing many common tasks including Sinatra-style request routing, HTTP caching, content negotiation, multipart handling, and much more. Asynchronous responses are fully supported through the use of [promises](http://promises-aplus.github.io/promises-spec/).\n\nA more full-featured example might look like this:\n\n```js\nvar mach = require('mach');\nvar app = mach.stack();\n\n// Log all requests.\napp.use(mach.logger);\n\n// Serve requests to the \"files\" subdomain with a static file server.\napp.map('files.example.com', function (app) {\n  app.use(mach.file, '/www/downloads');\n});\n\napp.use(mach.session);    // HTTP sessions\napp.use(mach.params);     // Parse request parameters\n\napp.get('/', function (request) {\n  return \"Hello world!\";\n});\n\n// GET /posts/123.json\napp.get('/posts/:post_id.json', function (request, postId) {\n  return query('SELECT * FROM posts WHERE id=?', postId).then(JSON.stringify);\n});\n\n// POST /posts/123/comments\napp.post('/posts/:post_id/comments', function (request) {\n  var authorId = request.params.author_id;\n  var commentBody = request.params.body;\n  // ...\n  return 201;\n});\n\n// Serve the app, listening on port 3000.\nmach.serve(app, 3000);\n```\n\nPlease [checkout the docs](https://github.com/machjs/mach/wiki) for more information and lots of usage examples.\n\n### Installation\n\n    $ npm install mach\n\n### Issues\n\nPlease file issues on the [issue tracker on GitHub](https://github.com/machjs/mach/issues).\n\n### Specs\n\nBefore you run the specs, do an `npm install`.\n\nTo run all the specs:\n\n    $ mocha spec\n\nTo run an individual spec:\n\n    $ mocha spec/content-type-spec.js\n\nThe Redis session store specs rely on Redis to run successfully. By default they are skipped, but if you want to run them fire up a Redis server on the default host and port and set the `$WITH_REDIS` environment variable.\n\n    $ WITH_REDIS=1 mocha spec\n\n### Influences\n\n* [Strata](http://stratajs.org/)\n* [Q-HTTP](https://github.com/kriskowal/q-http)\n* [JSGI & Jack](http://jackjs.org/)\n* [node.js](http://nodejs.org/)\n",
  "readmeFilename": "README.md",
  "_id": "mach@0.9.2",
  "dist": {
    "shasum": "537fc32c7809d26cc08f4c863ef8d1db1d7cab3d"
  },
  "_from": "mach@0.9.x",
  "_resolved": "https://registry.npmjs.org/mach/-/mach-0.9.2.tgz"
}
